Writing a C Compiler

Book: https://nostarch.com/writing-c-compiler
Author site: https://norasandler.com/book/

The book recommends using an implementation language with "pattern matching"
features. I think the "prototyped" status of this RFC means GNAT supports that.
I'm also pretty sure this is just syntactic sugar for a bunch of successive
`elsif` blocks, so I think I can manage even if it isn't well supported.

I wrote the lexer by hand rather than using regex as suggested in the book.
`GNAT.Regexp` is not PCRE-compatible and I didn't want to try to work around
the edge cases there. Maybe this will come back to bite me, but seems okay for
now.

My lexer initially caught the "misspelled_keyword" test having `returns`
instead of `return`, which is supposed to pass at this stage according to the
test suite. Ignoring the `\b` part of the regex pattern for keywords and
identifiers fixes it, but doesn't catch this error. The book expects you to
catch this during the parse stage apparently.
